import React from 'react';
declare const DefaultSelectionComponent: React.MemoExoticComponent<React.ForwardRefExoticComponent<{
    constrainMove?: import("./types").ConstrainMoveFunc | undefined;
    constrainResize?: import("./types").ConstrainResizeFunc | undefined;
    isInternalComponent?: boolean | undefined;
    keyboardTransformMultiplier?: number | undefined;
    onBlur?: ((event: React.FocusEvent<Element>, props: Required<{
        active?: boolean | undefined;
        disabled?: boolean | undefined;
        height: number;
        width: number;
        x: number;
        y: number;
        isInSelectionGroup?: boolean | undefined;
        shapeId: string;
        extraShapeProps?: {
            readonly [key: string]: any;
        } | undefined;
    }>) => void) | undefined;
    onChange?: ((nextRect: import("./types").Rectangle, props: Required<{
        active?: boolean | undefined;
        disabled?: boolean | undefined;
        height: number;
        width: number;
        x: number;
        y: number;
        isInSelectionGroup?: boolean | undefined;
        shapeId: string;
        extraShapeProps?: {
            readonly [key: string]: any;
        } | undefined;
    }>) => void) | undefined;
    onDelete?: ((event: React.KeyboardEvent<Element>, props: Required<{
        active?: boolean | undefined;
        disabled?: boolean | undefined;
        height: number;
        width: number;
        x: number;
        y: number;
        isInSelectionGroup?: boolean | undefined;
        shapeId: string;
        extraShapeProps?: {
            readonly [key: string]: any;
        } | undefined;
    }>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<Element>, props: Required<{
        active?: boolean | undefined;
        disabled?: boolean | undefined;
        height: number;
        width: number;
        x: number;
        y: number;
        isInSelectionGroup?: boolean | undefined;
        shapeId: string;
        extraShapeProps?: {
            readonly [key: string]: any;
        } | undefined;
    }>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<Element>, props: Required<{
        active?: boolean | undefined;
        disabled?: boolean | undefined;
        height: number;
        width: number;
        x: number;
        y: number;
        isInSelectionGroup?: boolean | undefined;
        shapeId: string;
        extraShapeProps?: {
            readonly [key: string]: any;
        } | undefined;
    }>) => void) | undefined;
    onIntermediateChange?: ((intermediateRect: import("./types").Rectangle) => void) | undefined;
    ResizeHandleComponent?: React.ComponentClass<{
        active: boolean;
        nativeActive: boolean;
        cursor: import("./types").ResizeCursor;
        isBeingChanged: boolean;
        isInSelectionGroup: boolean;
        name: import("./types").HandleName;
        onMouseDown: (event: React.MouseEvent<Element, MouseEvent>) => void;
        recommendedSize: number;
        scale: number;
        x: number;
        y: number;
    }, any> | React.FunctionComponent<{
        active: boolean;
        nativeActive: boolean;
        cursor: import("./types").ResizeCursor;
        isBeingChanged: boolean;
        isInSelectionGroup: boolean;
        name: import("./types").HandleName;
        onMouseDown: (event: React.MouseEvent<Element, MouseEvent>) => void;
        recommendedSize: number;
        scale: number;
        x: number;
        y: number;
    }> | undefined;
    wrapperProps?: React.SVGProps<SVGGElement> | undefined;
} & {
    active?: boolean | undefined;
    disabled?: boolean | undefined;
    height: number;
    width: number;
    x: number;
    y: number;
    isInSelectionGroup?: boolean | undefined;
    shapeId: string;
    extraShapeProps?: {
        readonly [key: string]: any;
    } | undefined;
} & React.RefAttributes<import("./types").ShapeActions>>>;
export default DefaultSelectionComponent;
